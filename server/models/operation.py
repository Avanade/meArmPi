# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server.models.point import Point  # noqa: F401,E501
from server import util


class Operation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, target: Point=None):  # noqa: E501
        """Operation - a model defined in Swagger

        :param type: The type of this Operation.  # noqa: E501
        :type type: str
        :param target: The target of this Operation.  # noqa: E501
        :type target: Point
        """
        self.swagger_types = {
            'type': str,
            'target': Point
        }

        self.attribute_map = {
            'type': 'type',
            'target': 'target'
        }

        self._type = type
        self._target = target

    @classmethod
    def from_dict(cls, dikt) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Operation of this Operation.  # noqa: E501
        :rtype: Operation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Operation.


        :return: The type of this Operation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Operation.


        :param type: The type of this Operation.
        :type type: str
        """
        allowed_values = ["moveTo", "grab", "release"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def target(self) -> Point:
        """Gets the target of this Operation.


        :return: The target of this Operation.
        :rtype: Point
        """
        return self._target

    @target.setter
    def target(self, target: Point):
        """Sets the target of this Operation.


        :param target: The target of this Operation.
        :type target: Point
        """

        self._target = target
